{"version":3,"sources":["util/Dictionary.js","util/Trie.js","util/BoggleSolverUtil.js","views/boggleBoard/BoggleBoardCell.jsx","views/boggleBoard/BoggleBoardColumn.jsx","views/boggleBoard/BoggleBoard.jsx","views/WordsFound.jsx","views/BoggleSolver.jsx","App.jsx","util/DictionaryReader.js","serviceWorker.js","index.js"],"names":["en_dictionary_test","TrieNode","key","this","parent","children","end","Trie","root","prototype","getWord","output","node","unshift","join","insert","word","i","length","contains","find","prefix","findAllWords","arr","child","neighboringPositionDeltas","parseCoordinates","position","indexOfComma","indexOf","parseInt","substring","searchForWord","boardState","wordsFound","currentWord","dictionaryTrie","visitedPositions","currentPosition","numberOfColumns","numberOfRows","add","neighboringPositions","currentX","currentY","forEach","neighboringPositionDelta","neighboringPositionDeltaX","neighboringPositionDeltaY","newPositionX","newPositionY","newPosition","has","push","getValidNeighboringPositions","neighboringPosition","newCurrentPosition","newVisitedPositions","Set","newCurrentWord","cellStyle","background","borderRadius","border","height","marginBottom","marginLeft","marginTop","marginRight","width","formHelperTextProps","style","textAlign","BoggleBoardCell","props","alphabet","cellName","setBoardState","React","useState","cellValue","setCellValue","hasError","setHasError","inputProps","color","fontSize","TextField","error","FormHelperTextProps","helperText","undefined","value","onChange","event","newValue","target","charAt","toUpperCase","BoggleBoardColumn","columnIndex","rowCells","boardStyle","display","paddingLeft","paddingRight","containerStyle","alignItems","flexDirection","buttonStyle","BoggleBoard","handleSolve","columns","Button","variant","onClick","wordListStyle","WordsFound","map","headerStyle","boardContainerStyle","left","wordsFoundContainerStyle","right","BoggleSolver","setWordsFound","useEffect","initialBoardState","j","Object","entries","letter","visistedPositions","Array","from","solveTheBoggle","App","dictionary","setDictionaryTrie","newDictionaryTrie","minimumWordLength","maxWordLength","filteredDictionary","reduce","filterDictionary","createDictionaryTrie","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"yOAMMA,EAAqB,CACvB,UACA,aACA,cACA,YACA,WACA,UACA,UACA,WACA,cACA,UACA,SACA,UACA,SACA,SACA,UACA,YACA,aACA,UACA,YACA,SACA,QACA,QACA,cACA,cACA,cACA,eACA,cACA,gBACA,kBACA,WACA,aACA,aACA,WACA,cACA,gBACA,UACA,UACA,UACA,YACA,cACA,aACA,cACA,SACA,OACA,aACA,aACA,cACA,eACA,eACA,eACA,OACA,QACA,UACA,YACA,SACA,QACA,SACA,UACA,UACA,YACA,aACA,cACA,kBACA,aACA,gBACA,UACA,UACA,OACA,UACA,UACA,SACA,eACA,YACA,aACA,YACA,WACA,aACA,UACA,UACA,WACA,YACA,aACA,cACA,eACA,eACA,cACA,WACA,UACA,aACA,aACA,aACA,cACA,aACA,SACA,UACA,aACA,UACA,WACA,UACA,WACA,QACA,SACA,SACA,SACA,YACA,MACA,SACA,YACA,aACA,cACA,cACA,aACA,SACA,aACA,WACA,YACA,SACA,UACA,UACA,WACA,WACA,YACA,cACA,YACA,WACA,aACA,YACA,UACA,SACA,UACA,SACA,OACA,UACA,WACA,YACA,aACA,SACA,WACA,aACA,aACA,cACA,aACA,UACA,WACA,aACA,eACA,QACA,QACA,UACA,SACA,QACA,eACA,OACA,UACA,SACA,SACA,SACA,QACA,SACA,UACA,WACA,SACA,SACA,UACA,WACA,cACA,YACA,WACA,QACA,SACA,aACA,eACA,MACA,SACA,WACA,YACA,YACA,aACA,aACA,cACA,aACA,YACA,aACA,QACA,WACA,QACA,WACA,WACA,aACA,eACA,cACA,eACA,gBACA,cACA,cACA,cACA,gBACA,cACA,eACA,gBACA,aACA,eACA,YACA,YACA,cACA,YACA,cACA,MACA,SACA,YACA,SACA,YACA,SACA,QACA,SACA,YACA,SACA,QACA,UACA,UACA,WACA,QACA,SACA,WACA,YACA,YACA,QACA,WACA,YACA,YACA,UACA,UACA,cACA,YACA,YACA,aACA,YACA,aACA,cACA,eACA,YACA,eACA,eACA,gBACA,iBACA,eACA,eACA,gBACA,eACA,gBACA,iBACA,SACA,UACA,QACA,SACA,UACA,WACA,UACA,WACA,WACA,YACA,gBACA,aACA,iBACA,aACA,YACA,aACA,aACA,cACA,cACA,eACA,aACA,cACA,UACA,YACA,SACA,SACA,aACA,QACA,SACA,SACA,WACA,QACA,aACA,gBACA,eACA,cACA,cACA,YACA,aACA,WACA,aACA,WACA,QACA,UACA,UACA,WACA,aACA,YACA,gBACA,UACA,WACA,WACA,aACA,cACA,eACA,YACA,WACA,aACA,eACA,cACA,SACA,UACA,YACA,OACA,QACA,cACA,YACA,UACA,UACA,WACA,UACA,SACA,WACA,WACA,YACA,cACA,UACA,QACA,SACA,QACA,aACA,YACA,cACA,iBACA,aACA,SACA,YACA,cACA,OACA,OACA,MACA,MACA,cACA,WACA,YACA,YACA,WACA,YACA,SACA,UACA,UACA,WACA,UACA,WACA,UACA,YACA,cACA,aACA,cACA,QACA,SACA,QACA,UACA,aACA,gBACA,aACA,cACA,cACA,cACA,UACA,SACA,UACA,UACA,SACA,WACA,eACA,WACA,YACA,WACA,aACA,eACA,YACA,WACA,SACA,UACA,WACA,YACA,SACA,UACA,UACA,YACA,aACA,aACA,cACA,WACA,UACA,SACA,SACA,SACA,aACA,eACA,iBACA,YACA,QACA,YACA,OACA,SACA,WACA,UACA,aACA,UACA,cACA,WACA,aACA,cACA,eACA,WACA,YACA,WACA,YACA,aACA,cACA,QACA,QACA,SACA,QACA,WACA,UACA,SACA,WACA,WACA,YACA,WACA,YACA,YACA,aACA,aACA,cACA,aACA,YACA,aACA,SACA,UACA,SACA,SACA,UACA,WACA,YACA,UACA,WACA,SACA,aACA,WACA,YACA,WACA,YACA,cACA,WACA,aACA,QACA,MACA,UACA,YACA,WACA,aACA,SACA,UACA,YACA,YACA,aACA,aACA,cACA,UACA,UACA,WACA,WACA,YACA,YACA,YACA,UACA,WACA,YACA,YACA,WACA,YACA,aACA,cACA,WACA,UACA,YACA,cACA,cACA,YACA,aACA,aACA,WACA,WACA,aACA,WACA,QACA,QACA,SACA,WACA,YACA,UACA,UACA,WACA,SACA,cACA,WACA,WACA,cACA,YACA,eACA,WACA,YACA,WACA,YACA,WACA,aACA,eACA,iBACA,mBACA,aACA,UACA,WACA,WACA,OACA,UACA,WACA,YACA,aACA,aACA,cACA,eACA,gBACA,YACA,aACA,YACA,aACA,aACA,eACA,aACA,YACA,aACA,WACA,WACA,QACA,SACA,WACA,QACA,SACA,SACA,SACA,WACA,WACA,aACA,eACA,YACA,YACA,aACA,aACA,cACA,aACA,aACA,cACA,eACA,mBACA,cACA,aACA,iBACA,aACA,aACA,aACA,cACA,UACA,WACA,YACA,WACA,YACA,WACA,YACA,aACA,cACA,WACA,WACA,SACA,gBACA,aACA,aACA,aACA,YACA,WACA,aACA,eACA,iBACA,aACA,eACA,YACA,aACA,WACA,YACA,YACA,cACA,cACA,UACA,aACA,UACA,cACA,iBACA,kBACA,aACA,eACA,cACA,aACA,eACA,iBACA,eACA,eACA,iBACA,UACA,YACA,YACA,aACA,aACA,cACA,WACA,aACA,eACA,iBACA,aACA,gBACA,gBACA,cACA,cACA,WACA,YACA,aACA,YACA,aACA,WACA,aACA,aACA,iBACA,aACA,aACA,aACA,YACA,eACA,cACA,UACA,QACA,WACA,eACA,aACA,eACA,iBACA,aACA,cACA,cACA,cACA,cACA,gBACA,iBACA,iBACA,kBACA,eACA,iBACA,cACA,gBACA,kBACA,aACA,eACA,aACA,cACA,YACA,aACA,WACA,aACA,cACA,cACA,YACA,WACA,WACA,aACA,eACA,iBACA,YACA,aACA,aACA,aACA,eACA,SACA,aACA,SACA,WACA,YACA,YACA,YACA,YACA,cACA,WACA,aACA,UACA,WACA,UACA,MACA,aACA,UACA,YACA,aACA,YACA,UACA,MACA,UACA,SACA,YACA,UACA,SACA,UACA,SACA,WACA,aACA,WACA,cACA,QACA,YACA,aACA,YACA,WACA,aACA,aACA,QACA,QACA,YACA,YACA,UACA,SACA,UACA,WACA,UACA,QACA,SACA,WACA,SACA,WACA,aACA,eACA,SACA,UACA,SACA,QACA,UACA,UACA,WACA,UACA,YACA,cACA,OACA,QACA,WACA,YACA,WACA,YACA,QACA,UACA,WACA,UACA,UACA,WACA,WACA,QACA,MACA,SACA,UACA,QACA,SACA,UACA,KACA,cACA,cACA,WACA,SACA,UACA,UACA,UACA,SACA,UACA,OACA,UACA,WACA,UACA,WACA,YACA,YACA,YACA,WACA,aACA,eACA,cACA,cACA,eACA,kBACA,cACA,YACA,WACA,YACA,YACA,aACA,cACA,YACA,YACA,YACA,gBACA,YACA,aACA,cACA,WACA,SACA,aACA,UACA,SACA,SACA,SACA,UACA,YACA,QACA,UACA,WACA,YACA,YACA,WACA,YACA,aACA,WACA,WACA,YACA,cACA,cACA,WACA,cACA,cACA,eACA,cACA,SACA,WACA,QACA,aACA,aACA,SACA,UACA,cACA,eACA,WACA,aACA,UACA,WACA,YACA,WACA,YACA,cACA,SACA,UACA,UACA,UACA,eACA,QACA,SACA,aACA,aACA,cACA,gBACA,eACA,aACA,WACA,YACA,aACA,cACA,WACA,eACA,eACA,iBACA,gBACA,cACA,YACA,aACA,aACA,iBACA,aACA,YACA,cACA,YACA,WACA,YACA,aACA,YACA,aACA,cACA,YACA,WACA,cACA,YACA,YACA,eACA,aACA,YACA,aACA,aACA,UACA,WACA,SACA,UACA,UACA,WACA,YACA,cACA,YACA,UACA,KACA,MACA,WACA,UACA,WACA,WACA,WACA,SACA,OACA,QACA,QACA,SACA,OACA,QACA,WACA,WACA,UACA,aACA,YACA,OACA,YACA,YACA,aACA,YACA,UACA,WACA,UACA,aACA,WACA,UACA,WACA,YACA,aACA,UACA,SACA,eACA,WACA,YACA,QACA,SACA,SACA,YACA,UACA,WACA,QACA,QACA,UACA,SACA,aACA,SACA,WACA,SACA,UACA,WACA,MACA,aACA,WACA,YACA,WACA,QACA,aACA,WACA,QACA,UACA,YACA,UACA,WACA,aACA,YACA,WACA,UACA,SACA,WACA,YACA,WACA,aACA,WACA,UACA,YACA,OACA,SACA,QACA,UACA,UACA,SACA,UACA,WACA,SACA,SACA,WACA,OACA,SACA,cACA,WACA,WACA,eACA,YACA,aACA,UACA,aACA,eACA,iBACA,QACA,SACA,UACA,WACA,WACA,UACA,eACA,UACA,YACA,aACA,cACA,kBACA,iBACA,eACA,WACA,YACA,gBACA,UACA,YACA,WACA,UACA,YACA,gBACA,cACA,UACA,OACA,UACA,WACA,UACA,SACA,UACA,SACA,SACA,SACA,WACA,UACA,QACA,aACA,cACA,YACA,WACA,cACA,YACA,YACA,WACA,aACA,eACA,aACA,cACA,eACA,gBACA,gBACA,mBACA,eACA,eACA,WACA,gBACA,WACA,aACA,OACA,WACA,OACA,QACA,UACA,WACA,WACA,WACA,aACA,eACA,UACA,UACA,SACA,aACA,cACA,UACA,eACA,YACA,aACA,aACA,eACA,aACA,cACA,eACA,YACA,aACA,cACA,aACA,aACA,UACA,WACA,UACA,aACA,cACA,WACA,SACA,eACA,WACA,WACA,YACA,YACA,aACA,aACA,eACA,iBACA,aACA,WACA,aACA,aACA,cACA,UACA,aACA,QACA,YACA,QACA,aACA,UACA,YACA,WACA,YACA,YACA,cACA,WACA,YACA,aACA,SACA,SACA,UACA,SACA,QACA,UACA,aACA,YACA,SACA,UACA,WACA,UACA,aACA,aACA,YACA,UACA,WACA,QACA,SACA,UACA,OACA,WACA,WACA,SACA,UACA,eACA,WACA,QACA,WACA,YACA,WACA,YACA,YACA,SACA,UACA,UACA,iBACA,kBACA,gBACA,gBACA,mBACA,SACA,QACA,SACA,WACA,SACA,QACA,UACA,SACA,YACA,WACA,YACA,SACA,SACA,WACA,SACA,UACA,gBACA,UACA,WACA,YACA,YACA,OACA,SACA,OACA,YACA,eACA,aACA,aACA,UACA,YACA,cACA,WACA,aACA,WACA,QACA,SACA,cACA,eACA,YACA,eACA,gBACA,eACA,aACA,aACA,iBACA,YACA,UACA,WACA,SACA,UACA,aACA,QACA,UACA,WACA,UACA,YACA,OACA,SACA,aACA,aACA,aACA,UACA,UACA,WACA,UACA,SACA,WACA,YACA,WACA,aACA,WACA,aACA,QACA,YACA,WACA,aACA,UACA,YACA,cACA,UACA,UACA,aACA,eACA,WACA,WACA,aACA,YACA,cACA,gBACA,UACA,YACA,SACA,WACA,YACA,cACA,gBACA,SACA,WACA,WACA,YACA,cACA,gBACA,aACA,aACA,gBACA,WACA,WACA,UACA,cACA,YACA,WACA,cACA,OACA,UACA,YACA,UACA,eACA,aACA,aACA,aACA,aACA,WACA,QACA,UACA,UACA,UACA,WACA,WACA,QACA,WACA,YACA,aACA,cACA,cACA,eACA,gBACA,WACA,aACA,cACA,YACA,SACA,gBACA,aACA,gBACA,gBACA,eACA,eACA,UACA,UACA,QACA,SACA,UACA,YACA,aACA,WACA,SACA,UACA,UACA,QACA,UACA,aACA,SACA,WACA,UACA,WACA,YACA,WACA,YACA,SACA,UACA,WACA,YACA,QACA,SACA,SACA,SACA,QACA,UACA,WACA,YACA,YACA,iBACA,kBACA,gBACA,kBACA,OACA,UACA,WACA,SACA,UACA,YACA,WACA,aACA,WACA,WACA,YACA,QACA,SACA,cACA,eACA,UACA,SACA,QACA,YACA,UACA,WACA,OACA,WACA,YACA,YACA,WACA,WACA,WACA,aACA,SACA,OACA,QACA,YACA,WACA,cACA,QACA,UACA,SACA,WACA,SACA,WACA,UACA,WACA,aACA,UACA,QACA,SACA,kBACA,cACA,SACA,MACA,UACA,UACA,WACA,UACA,SACA,SACA,YACA,WACA,iBACA,aACA,cACA,eACA,aACA,iBACA,kBACA,aACA,cACA,cACA,cACA,eACA,WACA,OACA,QACA,YACA,QACA,UACA,WACA,WACA,YACA,YACA,YACA,SACA,WACA,QACA,YACA,UACA,SACA,WACA,YACA,WACA,WACA,UACA,YACA,WACA,cACA,SACA,aACA,SACA,QACA,SACA,UACA,WACA,QACA,WACA,UACA,WACA,UACA,WACA,QACA,WACA,SACA,UACA,SACA,WACA,UACA,OACA,UACA,SACA,UACA,WACA,OACA,QACA,UACA,cACA,WACA,aACA,WACA,QACA,SACA,SACA,YACA,gBACA,UACA,SACA,UACA,SACA,UACA,UACA,WACA,QACA,UACA,SACA,UACA,WACA,UACA,WACA,WACA,YACA,QACA,WACA,YACA,SACA,SACA,OACA,QACA,SACA,SACA,UACA,YACA,OACA,SACA,QACA,SACA,SACA,UACA,SACA,UACA,WACA,SACA,UACA,UACA,WACA,YACA,UACA,WACA,WACA,YACA,cACA,eACA,aACA,YACA,SACA,UACA,SACA,WACA,UACA,UACA,SACA,UACA,MACA,UACA,WACA,aACA,WACA,YACA,UACA,SACA,UACA,QACA,QACA,QACA,WACA,SACA,QACA,UACA,YACA,SACA,UACA,UACA,YACA,aACA,WACA,UACA,YACA,OACA,UACA,SACA,UACA,WACA,aACA,SACA,UACA,YACA,UACA,WACA,YACA,SACA,UACA,WACA,YACA,QACA,SACA,UACA,UACA,YACA,UACA,WACA,UACA,OACA,QACA,SACA,OACA,QACA,QACA,WACA,KACA,MACA,MACA,MACA,KACA,MACA,SACA,OACA,aACA,UACA,YACA,aACA,UACA,WACA,cACA,WACA,YACA,WACA,YACA,cACA,WACA,QACA,SACA,UACA,WACA,UACA,YACA,cACA,UACA,QACA,SACA,WACA,aACA,YACA,SACA,UACA,UACA,WACA,UACA,SACA,QACA,SACA,cACA,gBACA,YACA,aACA,UACA,UACA,WACA,UACA,WACA,cACA,aACA,YACA,YACA,YACA,aACA,cACA,cACA,aACA,aACA,eACA,mBACA,eACA,iBACA,gBACA,gBACA,iBACA,kBACA,kBACA,sBACA,kBACA,kBACA,aACA,cACA,cACA,eACA,gBACA,eACA,aACA,cACA,gBACA,eACA,eACA,gBACA,iBACA,iBACA,kBACA,kBACA,iBACA,gBACA,kBACA,cACA,gBACA,aACA,aACA,gBACA,eACA,eACA,eACA,gBACA,gBACA,iBACA,iBACA,gBACA,eACA,gBACA,kBACA,eACA,aACA,eACA,iBACA,iBACA,YACA,kBACA,kBACA,gBACA,iBACA,gBACA,sBACA,gBACA,kBACA,eACA,gBACA,aACA,cACA,cACA,gBACA,gBACA,gBACA,kBACA,qBACA,iBACA,cACA,gBACA,oBACA,cACA,aACA,kBACA,gBACA,iBACA,mBACA,gBACA,gBACA,aACA,eACA,eACA,cACA,iBACA,gBACA,gBACA,iBACA,eACA,WACA,kBACA,eACA,mBACA,mBACA,oBACA,qBACA,kBACA,kBACA,mBACA,oBACA,gBACA,kBACA,gBACA,YACA,eACA,cACA,WACA,YACA,aACA,aACA,eACA,YACA,cACA,aACA,WACA,aACA,UACA,YACA,cACA,WACA,WACA,YACA,WACA,YACA,QACA,iBACA,UACA,UACA,YACA,WACA,UACA,UACA,YACA,aACA,WACA,aACA,cACA,SACA,WACA,WACA,eACA,YACA,SACA,WACA,aACA,YACA,cACA,WACA,QACA,UACA,WACA,YACA,UACA,cACA,cACA,YACA,YACA,YACA,WACA,YACA,SACA,OACA,UACA,WACA,WACA,YACA,UACA,WACA,aACA,WACA,eACA,eACA,eACA,mBACA,cACA,cACA,aACA,eACA,cACA,gBACA,gBACA,eACA,eACA,eACA,eACA,aACA,aACA,aACA,aACA,aACA,aACA,cACA,cACA,cACA,cACA,cACA,eACA,eACA,YACA,aACA,WACA,YACA,eACA,cACA,WACA,aACA,eACA,eACA,iBACA,gBACA,kBACA,gBACA,eACA,oBACA,oBACA,YACA,aACA,aACA,eACA,YACA,UACA,YACA,UACA,WACA,QACA,WACA,UACA,OACA,WACA,WACA,UACA,QACA,WACA,OACA,SACA,SACA,eACA,kBACA,cACA,eACA,cACA,WACA,cACA,aACA,aACA,YACA,UACA,UACA,UACA,WACA,WACA,WACA,UACA,SACA,WACA,YACA,WACA,aACA,WACA,aACA,WACA,UACA,QACA,UACA,WACA,SACA,WACA,QACA,YACA,WACA,QACA,SACA,cACA,aACA,WACA,UACA,WACA,gBACA,YACA,aACA,cACA,WACA,WACA,YACA,cACA,aACA,aACA,eACA,cACA,aACA,WACA,eACA,UACA,SACA,UACA,UACA,YACA,YACA,aACA,aACA,cACA,WACA,WACA,YACA,SACA,YACA,YACA,SACA,OACA,QACA,UACA,UACA,WACA,WACA,YACA,WACA,WACA,SACA,QACA,SACA,SACA,UACA,WACA,UACA,SACA,WACA,UACA,QACA,UACA,WACA,UACA,WACA,WACA,WACA,gBACA,YACA,YACA,SACA,QACA,YACA,WACA,YACA,aACA,gBACA,aACA,UACA,UACA,WACA,UACA,SACA,WACA,YACA,WACA,aACA,WACA,WACA,YACA,cACA,gBACA,YACA,WACA,YACA,aACA,SACA,YACA,cACA,gBACA,YACA,aACA,aACA,aACA,eACA,gBACA,cACA,cACA,eACA,YACA,YACA,cACA,cACA,eACA,cACA,eACA,eACA,aACA,YACA,YACA,YACA,cACA,SACA,WACA,YACA,WACA,SACA,QACA,SACA,UACA,UACA,WACA,YACA,SACA,UACA,QACA,WACA,YACA,SACA,YACA,YACA,YACA,YACA,aACA,cACA,WACA,WACA,SACA,YACA,SACA,YACA,YACA,QACA,SACA,UACA,WACA,UACA,UACA,OACA,SACA,eACA,YACA,UACA,eACA,iBACA,cACA,WACA,WACA,UACA,YACA,aACA,YACA,YACA,QACA,SACA,OACA,WACA,cACA,SACA,YACA,WACA,eACA,eACA,WACA,YACA,WACA,YACA,UACA,UACA,WACA,YACA,YACA,aACA,aACA,gBACA,YACA,aACA,gBACA,cACA,cACA,cACA,YACA,aACA,iBACA,kBACA,iBACA,eACA,gBACA,iBACA,kBACA,mBACA,cACA,eACA,gBACA,iBACA,cACA,oBACA,oBACA,eACA,iBACA,kBACA,iBACA,iBACA,iBACA,gBACA,mBACA,kBACA,kBACA,gBACA,iBACA,mBACA,kBACA,iBACA,aACA,cACA,aACA,eACA,aACA,YACA,aACA,aACA,YACA,cACA,YACA,QACA,WACA,UACA,cACA,gBACA,eACA,eACA,UACA,aACA,WACA,SACA,SACA,aACA,WACA,WACA,WACA,YACA,YACA,WACA,YACA,WACA,WACA,aACA,aACA,cACA,aACA,cACA,aACA,aACA,UACA,YACA,YACA,UACA,YACA,YACA,SACA,cACA,UACA,WACA,cACA,WACA,YACA,UACA,QACA,SACA,UACA,WACA,YACA,SACA,cACA,SACA,UACA,UACA,UACA,aACA,WACA,SACA,WACA,YACA,YACA,aACA,WACA,QACA,UACA,WACA,aACA,QACA,SACA,WACA,YACA,YACA,UACA,YACA,SACA,WACA,aACA,SACA,OACA,SACA,WACA,UACA,WACA,QACA,UACA,UACA,WACA,SACA,WACA,YACA,aACA,UACA,YACA,UACA,WACA,SACA,YACA,YACA,aACA,WACA,WACA,YACA,UACA,UACA,WACA,YACA,QACA,WACA,YACA,WACA,YACA,WACA,YACA,WACA,aACA,aACA,eACA,SACA,UACA,UACA,WACA,UACA,YACA,aACA,UACA,UACA,SACA,UACA,UACA,WACA,eACA,gBACA,YACA,YACA,UACA,WACA,YACA,aACA,WACA,YACA,WACA,YACA,aACA,WACA,YACA,YACA,YACA,cACA,aACA,QACA,OACA,WACA,UACA,WACA,QACA,WACA,WACA,WACA,SACA,WACA,YACA,YACA,YACA,aACA,UAC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","file":"static/js/main.93b38dfa.chunk.js","sourcesContent":["/*\n * To get English dictionary I used words_alpha.txt from https://github.com/dwyl/english-words/ and then\n * used https://pinetools.com/add-text-each-line to append quotes and commas so I could easily make an array. It was too big\n * and causing compile time to take a long time so I just started randomly cutting out sections of it to shorten it down.\n */\n\nconst en_dictionary_test = [\n    'abietin',\n    'abietineae',\n    'abietineous',\n    'abietinic',\n    'abietite',\n    'abiezer',\n    'abigail',\n    'abigails',\n    'abigailship',\n    'abigeat',\n    'abigei',\n    'abigeus',\n    'abying',\n    'abilao',\n    'abilene',\n    'abiliment',\n    'abilitable',\n    'ability',\n    'abilities',\n    'abilla',\n    'abilo',\n    'abime',\n    'abintestate',\n    'abiogeneses',\n    'abiogenesis',\n    'abiogenesist',\n    'abiogenetic',\n    'abiogenetical',\n    'abiogenetically',\n    'abiogeny',\n    'abiogenist',\n    'abiogenous',\n    'abiology',\n    'abiological',\n    'abiologically',\n    'abioses',\n    'abiosis',\n    'abiotic',\n    'abiotical',\n    'abiotically',\n    'abiotrophy',\n    'abiotrophic',\n    'abipon',\n    'abir',\n    'abirritant',\n    'abirritate',\n    'abirritated',\n    'abirritating',\n    'abirritation',\n    'abirritative',\n    'abys',\n    'abysm',\n    'abysmal',\n    'abysmally',\n    'abysms',\n    'abyss',\n    'abyssa',\n    'abyssal',\n    'abysses',\n    'abyssinia',\n    'abyssinian',\n    'abyssinians',\n    'abyssobenthonic',\n    'abyssolith',\n    'abyssopelagic',\n    'abyssus',\n    'abiston',\n    'abit',\n    'abitibi',\n    'abiuret',\n    'abject',\n    'abjectedness',\n    'abjection',\n    'abjections',\n    'abjective',\n    'abjectly',\n    'abjectness',\n    'abjoint',\n    'abjudge',\n    'abjudged',\n    'abjudging',\n    'abjudicate',\n    'abjudicated',\n    'abjudicating',\n    'abjudication',\n    'abjudicator',\n    'abjugate',\n    'abjunct',\n    'abjunction',\n    'abjunctive',\n    'abjuration',\n    'abjurations',\n    'abjuratory',\n    'abjure',\n    'abjured',\n    'abjurement',\n    'abjurer',\n    'abjurers',\n    'abjures',\n    'abjuring',\n    'abkar',\n    'abkari',\n    'abkary',\n    'abkhas',\n    'abkhasian',\n    'abl',\n    'ablach',\n    'ablactate',\n    'ablactated',\n    'ablactating',\n    'ablactation',\n    'ablaqueate',\n    'ablare',\n    'ablastemic',\n    'ablastin',\n    'ablastous',\n    'ablate',\n    'ablated',\n    'ablates',\n    'ablating',\n    'ablation',\n    'ablations',\n    'ablatitious',\n    'ablatival',\n    'ablative',\n    'ablatively',\n    'ablatives',\n    'ablator',\n    'ablaut',\n    'ablauts',\n    'ablaze',\n    'able',\n    'ableeze',\n    'ablegate',\n    'ablegates',\n    'ablegation',\n    'ablend',\n    'ableness',\n    'ablepharia',\n    'ablepharon',\n    'ablepharous',\n    'ablepharus',\n    'ablepsy',\n    'ablepsia',\n    'ableptical',\n    'ableptically',\n    'abler',\n    'ables',\n    'ablesse',\n    'ablest',\n    'ablet',\n    'ablewhackets',\n    'ably',\n    'ablings',\n    'ablins',\n    'ablock',\n    'abloom',\n    'ablow',\n    'ablude',\n    'abluent',\n    'abluents',\n    'ablush',\n    'ablute',\n    'abluted',\n    'ablution',\n    'ablutionary',\n    'ablutions',\n    'abluvion',\n    'abmho',\n    'abmhos',\n    'abmodality',\n    'abmodalities',\n    'abn',\n    'abnaki',\n    'abnegate',\n    'abnegated',\n    'abnegates',\n    'abnegating',\n    'abnegation',\n    'abnegations',\n    'abnegative',\n    'abnegator',\n    'abnegators',\n    'abner',\n    'abnerval',\n    'abnet',\n    'abneural',\n    'abnormal',\n    'abnormalcy',\n    'abnormalcies',\n    'abnormalise',\n    'abnormalised',\n    'abnormalising',\n    'abnormalism',\n    'abnormalist',\n    'abnormality',\n    'abnormalities',\n    'abnormalize',\n    'abnormalized',\n    'abnormalizing',\n    'abnormally',\n    'abnormalness',\n    'abnormals',\n    'abnormity',\n    'abnormities',\n    'abnormous',\n    'abnumerable',\n    'abo',\n    'aboard',\n    'aboardage',\n    'abobra',\n    'abococket',\n    'abodah',\n    'abode',\n    'aboded',\n    'abodement',\n    'abodes',\n    'abody',\n    'aboding',\n    'abogado',\n    'abogados',\n    'abohm',\n    'abohms',\n    'aboideau',\n    'aboideaus',\n    'aboideaux',\n    'aboil',\n    'aboiteau',\n    'aboiteaus',\n    'aboiteaux',\n    'abolete',\n    'abolish',\n    'abolishable',\n    'abolished',\n    'abolisher',\n    'abolishers',\n    'abolishes',\n    'abolishing',\n    'abolishment',\n    'abolishments',\n    'abolition',\n    'abolitionary',\n    'abolitionise',\n    'abolitionised',\n    'abolitionising',\n    'abolitionism',\n    'abolitionist',\n    'abolitionists',\n    'abolitionize',\n    'abolitionized',\n    'abolitionizing',\n    'abolla',\n    'abollae',\n    'aboma',\n    'abomas',\n    'abomasa',\n    'abomasal',\n    'abomasi',\n    'abomasum',\n    'abomasus',\n    'abomasusi',\n    'abominability',\n    'abominable',\n    'abominableness',\n    'abominably',\n    'abominate',\n    'abominated',\n    'abominates',\n    'abominating',\n    'abomination',\n    'abominations',\n    'abominator',\n    'abominators',\n    'abomine',\n    'abondance',\n    'abongo',\n    'abonne',\n    'abonnement',\n    'aboon',\n    'aborad',\n    'aboral',\n    'aborally',\n    'abord',\n    'aboriginal',\n    'aboriginality',\n    'aboriginally',\n    'aboriginals',\n    'aboriginary',\n    'aborigine',\n    'aborigines',\n    'aborning',\n    'aborsement',\n    'aborsive',\n    'abort',\n    'aborted',\n    'aborter',\n    'aborters',\n    'aborticide',\n    'abortient',\n    'abortifacient',\n    'abortin',\n    'aborting',\n    'abortion',\n    'abortional',\n    'abortionist',\n    'abortionists',\n    'abortions',\n    'abortive',\n    'abortively',\n    'abortiveness',\n    'abortogenic',\n    'aborts',\n    'abortus',\n    'abortuses',\n    'abos',\n    'abote',\n    'abouchement',\n    'aboudikro',\n    'abought',\n    'aboulia',\n    'aboulias',\n    'aboulic',\n    'abound',\n    'abounded',\n    'abounder',\n    'abounding',\n    'aboundingly',\n    'abounds',\n    'about',\n    'abouts',\n    'above',\n    'aboveboard',\n    'abovedeck',\n    'aboveground',\n    'abovementioned',\n    'aboveproof',\n    'aboves',\n    'abovesaid',\n    'abovestairs',\n    'abow',\n    'abox',\n    'abp',\n    'abr',\n    'abracadabra',\n    'abrachia',\n    'abrachias',\n    'abradable',\n    'abradant',\n    'abradants',\n    'abrade',\n    'abraded',\n    'abrader',\n    'abraders',\n    'abrades',\n    'abrading',\n    'abraham',\n    'abrahamic',\n    'abrahamidae',\n    'abrahamite',\n    'abrahamitic',\n    'abray',\n    'abraid',\n    'abram',\n    'abramis',\n    'abranchial',\n    'abranchialism',\n    'abranchian',\n    'abranchiata',\n    'abranchiate',\n    'abranchious',\n    'abrasax',\n    'abrase',\n    'abrased',\n    'abraser',\n    'abrash',\n    'abrasing',\n    'abrasiometer',\n    'abrasion',\n    'abrasions',\n    'abrasive',\n    'abrasively',\n    'abrasiveness',\n    'abrasives',\n    'abrastol',\n    'abraum',\n    'abraxas',\n    'abrazite',\n    'abrazitic',\n    'abrazo',\n    'abrazos',\n    'abreact',\n    'abreacted',\n    'abreacting',\n    'abreaction',\n    'abreactions',\n    'abreacts',\n    'abreast',\n    'abreed',\n    'abrege',\n    'abreid',\n    'abrenounce',\n    'abrenunciate',\n    'abrenunciation',\n    'abreption',\n    'abret',\n    'abreuvoir',\n    'abri',\n    'abrico',\n    'abricock',\n    'abricot',\n    'abridgable',\n    'abridge',\n    'abridgeable',\n    'abridged',\n    'abridgedly',\n    'abridgement',\n    'abridgements',\n    'abridger',\n    'abridgers',\n    'abridges',\n    'abridging',\n    'abridgment',\n    'abridgments',\n    'abrim',\n    'abrin',\n    'abrine',\n    'abris',\n    'abristle',\n    'abroach',\n    'abroad',\n    'abrocoma',\n    'abrocome',\n    'abrogable',\n    'abrogate',\n    'abrogated',\n    'abrogates',\n    'abrogating',\n    'abrogation',\n    'abrogations',\n    'abrogative',\n    'abrogator',\n    'abrogators',\n    'abroma',\n    'abronia',\n    'abrood',\n    'abrook',\n    'abrosia',\n    'abrosias',\n    'abrotanum',\n    'abrotin',\n    'abrotine',\n    'abrupt',\n    'abruptedly',\n    'abrupter',\n    'abruptest',\n    'abruptio',\n    'abruption',\n    'abruptiones',\n    'abruptly',\n    'abruptness',\n    'abrus',\n    'abs',\n    'absalom',\n    'absampere',\n    'absaroka',\n    'absarokite',\n    'abscam',\n    'abscess',\n    'abscessed',\n    'abscesses',\n    'abscessing',\n    'abscession',\n    'abscessroot',\n    'abscind',\n    'abscise',\n    'abscised',\n    'abscises',\n    'abscising',\n    'abscisins',\n    'abscision',\n    'absciss',\n    'abscissa',\n    'abscissae',\n    'abscissas',\n    'abscisse',\n    'abscissin',\n    'abscission',\n    'abscissions',\n    'absconce',\n    'abscond',\n    'absconded',\n    'abscondedly',\n    'abscondence',\n    'absconder',\n    'absconders',\n    'absconding',\n    'absconds',\n    'absconsa',\n    'abscoulomb',\n    'abscound',\n    'absee',\n    'absey',\n    'abseil',\n    'abseiled',\n    'abseiling',\n    'abseils',\n    'absence',\n    'absences',\n    'absent',\n    'absentation',\n    'absented',\n    'absentee',\n    'absenteeism',\n    'absentees',\n    'absenteeship',\n    'absenter',\n    'absenters',\n    'absentia',\n    'absenting',\n    'absently',\n    'absentment',\n    'absentminded',\n    'absentmindedly',\n    'absentmindedness',\n    'absentness',\n    'absents',\n    'absfarad',\n    'abshenry',\n    'absi',\n    'absinth',\n    'absinthe',\n    'absinthes',\n    'absinthial',\n    'absinthian',\n    'absinthiate',\n    'absinthiated',\n    'absinthiating',\n    'absinthic',\n    'absinthiin',\n    'absinthin',\n    'absinthine',\n    'absinthism',\n    'absinthismic',\n    'absinthium',\n    'absinthol',\n    'absinthole',\n    'absinths',\n    'absyrtus',\n    'absis',\n    'absist',\n    'absistos',\n    'absit',\n    'absmho',\n    'absohm',\n    'absoil',\n    'absolent',\n    'absolute',\n    'absolutely',\n    'absoluteness',\n    'absoluter',\n    'absolutes',\n    'absolutest',\n    'absolution',\n    'absolutions',\n    'absolutism',\n    'absolutist',\n    'absolutista',\n    'absolutistic',\n    'absolutistically',\n    'absolutists',\n    'absolutive',\n    'absolutization',\n    'absolutize',\n    'absolutory',\n    'absolvable',\n    'absolvatory',\n    'absolve',\n    'absolved',\n    'absolvent',\n    'absolver',\n    'absolvers',\n    'absolves',\n    'absolving',\n    'absolvitor',\n    'absolvitory',\n    'absonant',\n    'absonous',\n    'absorb',\n    'absorbability',\n    'absorbable',\n    'absorbance',\n    'absorbancy',\n    'absorbant',\n    'absorbed',\n    'absorbedly',\n    'absorbedness',\n    'absorbefacient',\n    'absorbency',\n    'absorbencies',\n    'absorbent',\n    'absorbents',\n    'absorber',\n    'absorbers',\n    'absorbing',\n    'absorbingly',\n    'absorbition',\n    'absorbs',\n    'absorbtion',\n    'absorpt',\n    'absorptance',\n    'absorptiometer',\n    'absorptiometric',\n    'absorption',\n    'absorptional',\n    'absorptions',\n    'absorptive',\n    'absorptively',\n    'absorptiveness',\n    'absorptivity',\n    'absquatulate',\n    'absquatulation',\n    'abstain',\n    'abstained',\n    'abstainer',\n    'abstainers',\n    'abstaining',\n    'abstainment',\n    'abstains',\n    'abstemious',\n    'abstemiously',\n    'abstemiousness',\n    'abstention',\n    'abstentionism',\n    'abstentionist',\n    'abstentions',\n    'abstentious',\n    'absterge',\n    'absterged',\n    'abstergent',\n    'absterges',\n    'absterging',\n    'absterse',\n    'abstersion',\n    'abstersive',\n    'abstersiveness',\n    'abstertion',\n    'abstinence',\n    'abstinency',\n    'abstinent',\n    'abstinential',\n    'abstinently',\n    'abstort',\n    'abstr',\n    'abstract',\n    'abstractable',\n    'abstracted',\n    'abstractedly',\n    'abstractedness',\n    'abstracter',\n    'abstracters',\n    'abstractest',\n    'abstracting',\n    'abstraction',\n    'abstractional',\n    'abstractionism',\n    'abstractionist',\n    'abstractionists',\n    'abstractions',\n    'abstractitious',\n    'abstractive',\n    'abstractively',\n    'abstractiveness',\n    'abstractly',\n    'abstractness',\n    'abstractor',\n    'abstractors',\n    'abstracts',\n    'abstrahent',\n    'abstrict',\n    'abstricted',\n    'abstricting',\n    'abstriction',\n    'abstricts',\n    'abstrude',\n    'abstruse',\n    'abstrusely',\n    'abstruseness',\n    'abstrusenesses',\n    'abstruser',\n    'abstrusest',\n    'abstrusion',\n    'abstrusity',\n    'abstrusities',\n    'absume',\n    'absumption',\n    'absurd',\n    'absurder',\n    'absurdest',\n    'absurdism',\n    'absurdist',\n    'absurdity',\n    'absurdities',\n    'absurdly',\n    'absurdness',\n    'absurds',\n    'absurdum',\n    'absvolt',\n    'abt',\n    'abterminal',\n    'abthain',\n    'abthainry',\n    'abthainrie',\n    'abthanage',\n    'abtruse',\n    'abu',\n    'abubble',\n    'abucco',\n    'abuilding',\n    'abuleia',\n    'abulia',\n    'abulias',\n    'abulic',\n    'abulyeit',\n    'abulomania',\n    'abumbral',\n    'abumbrellar',\n    'abuna',\n    'abundance',\n    'abundances',\n    'abundancy',\n    'abundant',\n    'abundantia',\n    'abundantly',\n    'abune',\n    'abura',\n    'aburabozu',\n    'aburagiri',\n    'aburban',\n    'aburst',\n    'aburton',\n    'abusable',\n    'abusage',\n    'abuse',\n    'abused',\n    'abusedly',\n    'abusee',\n    'abuseful',\n    'abusefully',\n    'abusefulness',\n    'abuser',\n    'abusers',\n    'abuses',\n    'abush',\n    'abusing',\n    'abusion',\n    'abusious',\n    'abusive',\n    'abusively',\n    'abusiveness',\n    'abut',\n    'abuta',\n    'abutilon',\n    'abutilons',\n    'abutment',\n    'abutments',\n    'abuts',\n    'abuttal',\n    'abuttals',\n    'abutted',\n    'abutter',\n    'abutters',\n    'abutting',\n    'abuzz',\n    'abv',\n    'abvolt',\n    'abvolts',\n    'abwab',\n    'abwatt',\n    'abwatts',\n    'ac',\n    'acacatechin',\n    'acacatechol',\n    'acacetin',\n    'acacia',\n    'acacian',\n    'acacias',\n    'acaciin',\n    'acacin',\n    'acacine',\n    'acad',\n    'academe',\n    'academes',\n    'academy',\n    'academia',\n    'academial',\n    'academian',\n    'academias',\n    'academic',\n    'academical',\n    'academically',\n    'academicals',\n    'academician',\n    'academicians',\n    'academicianship',\n    'academicism',\n    'academics',\n    'academie',\n    'academies',\n    'academise',\n    'academised',\n    'academising',\n    'academism',\n    'academist',\n    'academite',\n    'academization',\n    'academize',\n    'academized',\n    'academizing',\n    'academus',\n    'acadia',\n    'acadialite',\n    'acadian',\n    'acadie',\n    'acaena',\n    'acajou',\n    'acajous',\n    'acalculia',\n    'acale',\n    'acaleph',\n    'acalepha',\n    'acalephae',\n    'acalephan',\n    'acalephe',\n    'acalephes',\n    'acalephoid',\n    'acalephs',\n    'acalycal',\n    'acalycine',\n    'acalycinous',\n    'acalyculate',\n    'acalypha',\n    'acalypterae',\n    'acalyptrata',\n    'acalyptratae',\n    'acalyptrate',\n    'acamar',\n    'acampsia',\n    'acana',\n    'acanaceous',\n    'acanonical',\n    'acanth',\n    'acantha',\n    'acanthaceae',\n    'acanthaceous',\n    'acanthad',\n    'acantharia',\n    'acanthi',\n    'acanthia',\n    'acanthial',\n    'acanthin',\n    'acanthine',\n    'acetimetric',\n    'acetin',\n    'acetine',\n    'acetins',\n    'acetite',\n    'acuaesthesia',\n    'acuan',\n    'acuate',\n    'aerologies',\n    'aerologist',\n    'aerologists',\n    'aeromaechanic',\n    'aeromagnetic',\n    'aeromancer',\n    'aftertan',\n    'aftertask',\n    'aftertaste',\n    'aftertastes',\n    'aftertax',\n    'afterthinker',\n    'afterthought',\n    'afterthoughted',\n    'afterthoughts',\n    'afterthrift',\n    'aftertime',\n    'aftertimes',\n    'aftertouch',\n    'aftertreatment',\n    'aftertrial',\n    'afterturn',\n    'aftervision',\n    'afterwale',\n    'afterwar',\n    'afterward',\n    'afterwards',\n    'afterwash',\n    'afterwhile',\n    'afterwisdom',\n    'afterwise',\n    'afterwit',\n    'afterwitted',\n    'afterword',\n    'afterwork',\n    'afterworking',\n    'afterworld',\n    'afterwort',\n    'afterwrath',\n    'afterwrist',\n    'aftmost',\n    'aftonian',\n    'aftosa',\n    'aftosas',\n    'aftward',\n    'aftwards',\n    'afunction',\n    'afunctional',\n    'afwillite',\n    'afzelia',\n    'ag',\n    'aga',\n    'agabanee',\n    'agacant',\n    'agacante',\n    'agacella',\n    'agacerie',\n    'agaces',\n    'agad',\n    'agada',\n    'agade',\n    'agadic',\n    'agag',\n    'again',\n    'againbuy',\n    'againsay',\n    'against',\n    'againstand',\n    'againward',\n    'agal',\n    'agalactia',\n    'agalactic',\n    'agalactous',\n    'agalawood',\n    'agalaxy',\n    'agalaxia',\n    'agalena',\n    'agalenidae',\n    'agalinis',\n    'agalite',\n    'agalloch',\n    'agallochs',\n    'agallochum',\n    'agallop',\n    'agalma',\n    'agalmatolite',\n    'agalwood',\n    'agalwoods',\n    'agama',\n    'agamae',\n    'agamas',\n    'agamemnon',\n    'agamete',\n    'agametes',\n    'agami',\n    'agamy',\n    'agamian',\n    'agamic',\n    'agamically',\n    'agamid',\n    'agamidae',\n    'agamis',\n    'agamist',\n    'airliner',\n    'awe',\n    'botanising',\n    'botanist',\n    'botanists',\n    'botargos',\n    'botas',\n    'botaurinae',\n    'botaurus',\n    'botch',\n    'botched',\n    'botchedly',\n    'botcher',\n    'botchery',\n    'botcheries',\n    'botcherly',\n    'botchers',\n    'botches',\n    'botchy',\n    'botchier',\n    'botchiest',\n    'botchily',\n    'botchiness',\n    'botching',\n    'botchka',\n    'botchwork',\n    'bote',\n    'botein',\n    'botel',\n    'boteler',\n    'botella',\n    'botels',\n    'boterol',\n    'boteroll',\n    'botete',\n    'botfly',\n    'botflies',\n    'both',\n    'bother',\n    'botheration',\n    'bothered',\n    'botherer',\n    'botherheaded',\n    'bothering',\n    'botherment',\n    'bothers',\n    'bothersome',\n    'bothersomely',\n    'bothersomeness',\n    'bothy',\n    'bothie',\n    'bothies',\n    'bothlike',\n    'bothnian',\n    'bothnic',\n    'bothrenchyma',\n    'bothria',\n    'bothridia',\n    'bothridium',\n    'bothridiums',\n    'bothriocephalus',\n    'bothriocidaris',\n    'bothriolepis',\n    'bothrium',\n    'bothriums',\n    'bothrodendron',\n    'bothroi',\n    'bothropic',\n    'bothrops',\n    'bothros',\n    'bothsided',\n    'bothsidedness',\n    'boththridia',\n    'bothway',\n    'boti',\n    'botling',\n    'botocudo',\n    'botoyan',\n    'botone',\n    'botonee',\n    'botong',\n    'botony',\n    'botonn',\n    'botonnee',\n    'botonny',\n    'botry',\n    'botrychium',\n    'botrycymose',\n    'botrydium',\n    'botrylle',\n    'botryllidae',\n    'botryllus',\n    'botryogen',\n    'botryoid',\n    'botryoidal',\n    'botryoidally',\n    'botryolite',\n    'botryomyces',\n    'botryomycoma',\n    'botryomycosis',\n    'botryomycotic',\n    'botryopteriaceae',\n    'botryopterid',\n    'botryopteris',\n    'botryose',\n    'botryotherapy',\n    'botrytis',\n    'botrytises',\n    'bots',\n    'botswana',\n    'bott',\n    'botte',\n    'bottega',\n    'bottegas',\n    'botteghe',\n    'bottekin',\n    'botticelli',\n    'botticellian',\n    'bottier',\n    'bottine',\n    'bottle',\n    'bottlebird',\n    'bottlebrush',\n    'bottled',\n    'bottleflower',\n    'bottleful',\n    'bottlefuls',\n    'bottlehead',\n    'bottleholder',\n    'bottlelike',\n    'bottlemaker',\n    'bottlemaking',\n    'bottleman',\n    'bottleneck',\n    'bottlenecks',\n    'bottlenest',\n    'bottlenose',\n    'bottler',\n    'bottlers',\n    'bottles',\n    'bottlesful',\n    'bottlestone',\n    'bottling',\n    'bottom',\n    'bottomchrome',\n    'bottomed',\n    'bottomer',\n    'bottomers',\n    'bottoming',\n    'bottomland',\n    'bottomless',\n    'bottomlessly',\n    'bottomlessness',\n    'bottommost',\n    'bottomry',\n    'bottomried',\n    'bottomries',\n    'bottomrying',\n    'bottoms',\n    'bottonhook',\n    'botts',\n    'bottstick',\n    'bottu',\n    'botuliform',\n    'botulin',\n    'botulinal',\n    'botulins',\n    'botulinum',\n    'botulinus',\n    'botulinuses',\n    'botulism',\n    'botulisms',\n    'botulismus',\n    'boubas',\n    'boubou',\n    'boubous',\n    'boucan',\n    'bouch',\n    'bouchal',\n    'bouchaleen',\n    'boucharde',\n    'bouche',\n    'bouchee',\n    'bouchees',\n    'boucher',\n    'boucherism',\n    'boucherize',\n    'bouchette',\n    'bouchon',\n    'bouchons',\n    'boucl',\n    'boucle',\n    'boucles',\n    'boud',\n    'bouderie',\n    'boudeuse',\n    'boudin',\n    'boudoir',\n    'boudoiresque',\n    'boudoirs',\n    'bouet',\n    'bouffage',\n    'bouffancy',\n    'bouffant',\n    'bouffante',\n    'bouffants',\n    'bouffe',\n    'bouffes',\n    'bouffon',\n    'bougainvillaea',\n    'bougainvillaeas',\n    'bougainvillea',\n    'bougainvillia',\n    'bougainvilliidae',\n    'bougar',\n    'bouge',\n    'bougee',\n    'bougeron',\n    'bouget',\n    'bough',\n    'boughed',\n    'boughy',\n    'boughless',\n    'boughpot',\n    'boughpots',\n    'boughs',\n    'bought',\n    'boughten',\n    'bougie',\n    'bougies',\n    'bouillabaisse',\n    'bouilli',\n    'bouillon',\n    'bouillone',\n    'bouillons',\n    'bouk',\n    'boukit',\n    'boul',\n    'boulanger',\n    'boulangerite',\n    'boulangism',\n    'boulangist',\n    'boulder',\n    'bouldered',\n    'boulderhead',\n    'bouldery',\n    'bouldering',\n    'boulders',\n    'boule',\n    'boules',\n    'bouleuteria',\n    'bouleuterion',\n    'boulevard',\n    'boulevardier',\n    'boulevardiers',\n    'boulevardize',\n    'boulevards',\n    'bouleverse',\n    'bouleversement',\n    'boulework',\n    'boulimy',\n    'boulimia',\n    'boulle',\n    'boulles',\n    'boullework',\n    'boult',\n    'boultel',\n    'boultell',\n    'boulter',\n    'boulterer',\n    'boun',\n    'bounce',\n    'bounceable',\n    'bounceably',\n    'bounceback',\n    'bounced',\n    'bouncer',\n    'bouncers',\n    'bounces',\n    'bouncy',\n    'bouncier',\n    'bounciest',\n    'bouncily',\n    'bounciness',\n    'bouncing',\n    'bouncingly',\n    'bound',\n    'boundable',\n    'boundary',\n    'boundaries',\n    'bounded',\n    'boundedly',\n    'boundedness',\n    'bounden',\n    'bounder',\n    'bounderish',\n    'bounderishly',\n    'bounders',\n    'bounding',\n    'boundingly',\n    'boundless',\n    'boundlessly',\n    'boundlessness',\n    'boundly',\n    'boundness',\n    'bounds',\n    'boundure',\n    'bounteous',\n    'bounteously',\n    'bounteousness',\n    'bounty',\n    'bountied',\n    'bounties',\n    'bountiful',\n    'bountifully',\n    'bountifulness',\n    'bountihead',\n    'bountyless',\n    'bountiousness',\n    'bountith',\n    'bountree',\n    'bouquet',\n    'bouquetiere',\n    'bouquetin',\n    'bouquets',\n    'bouquiniste',\n    'bour',\n    'bourage',\n    'bourasque',\n    'bourbon',\n    'bourbonesque',\n    'bourbonian',\n    'bourbonism',\n    'bourbonist',\n    'bourbonize',\n    'bourbons',\n    'bourd',\n    'bourder',\n    'bourdis',\n    'bourdon',\n    'bourdons',\n    'bourette',\n    'bourg',\n    'bourgade',\n    'bourgeois',\n    'bourgeoise',\n    'bourgeoises',\n    'bourgeoisie',\n    'bourgeoisify',\n    'bourgeoisitic',\n    'bourgeon',\n    'bourgeoned',\n    'bourgeoning',\n    'bourgeons',\n    'bourgs',\n    'bourguignonne',\n    'bourignian',\n    'bourignianism',\n    'bourignianist',\n    'bourignonism',\n    'bourignonist',\n    'bourkha',\n    'bourlaw',\n    'bourn',\n    'bourne',\n    'bournes',\n    'bournless',\n    'bournonite',\n    'bournous',\n    'bourns',\n    'bourock',\n    'bourout',\n    'bourr',\n    'bourran',\n    'bourrasque',\n    'bourre',\n    'bourreau',\n    'bourree',\n    'bourrees',\n    'bourrelet',\n    'bourride',\n    'bourrides',\n    'bourse',\n    'bourses',\n    'bourtree',\n    'bourtrees',\n    'bouse',\n    'boused',\n    'bouser',\n    'bouses',\n    'bousy',\n    'bousing',\n    'bousouki',\n    'bousoukia',\n    'bousoukis',\n    'boussingaultia',\n    'boussingaultite',\n    'boustrophedon',\n    'boustrophedonic',\n    'bout',\n    'boutade',\n    'boutefeu',\n    'boutel',\n    'boutell',\n    'bouteloua',\n    'bouteria',\n    'bouteselle',\n    'boutylka',\n    'boutique',\n    'boutiques',\n    'bouto',\n    'bouton',\n    'boutonniere',\n    'boutonnieres',\n    'boutons',\n    'boutre',\n    'bouts',\n    'bouvardia',\n    'bouvier',\n    'bouviers',\n    'bouw',\n    'bouzouki',\n    'bouzoukia',\n    'bouzoukis',\n    'bovarism',\n    'bovarysm',\n    'bovarist',\n    'bovaristic',\n    'bovate',\n    'bove',\n    'bovey',\n    'bovenland',\n    'bovicide',\n    'boviculture',\n    'bovid',\n    'bovidae',\n    'bovids',\n    'boviform',\n    'bovine',\n    'bovinely',\n    'bovines',\n    'bovinity',\n    'bovinities',\n    'bovista',\n    'bovld',\n    'bovoid',\n    'bovovaccination',\n    'bovovaccine',\n    'bovver',\n    'bow',\n    'bowable',\n    'bowback',\n    'bowbells',\n    'bowbent',\n    'bowboy',\n    'bowden',\n    'bowdichia',\n    'bowditch',\n    'bowdlerisation',\n    'bowdlerise',\n    'bowdlerised',\n    'bowdlerising',\n    'bowdlerism',\n    'bowdlerization',\n    'bowdlerizations',\n    'bowdlerize',\n    'bowdlerized',\n    'bowdlerizer',\n    'bowdlerizes',\n    'bowdlerizing',\n    'bowdrill',\n    'bowe',\n    'bowed',\n    'bowedness',\n    'bowel',\n    'boweled',\n    'boweling',\n    'bowelled',\n    'bowelless',\n    'bowellike',\n    'bowelling',\n    'bowels',\n    'bowenite',\n    'bower',\n    'bowerbird',\n    'bowered',\n    'bowery',\n    'boweries',\n    'boweryish',\n    'bowering',\n    'bowerlet',\n    'bowerly',\n    'bowerlike',\n    'bowermay',\n    'bowermaiden',\n    'bowers',\n    'bowerwoman',\n    'bowess',\n    'bowet',\n    'bowfin',\n    'bowfins',\n    'bowfront',\n    'bowge',\n    'bowgrace',\n    'bowhead',\n    'bowheads',\n    'bowyang',\n    'bowyangs',\n    'bowie',\n    'bowieful',\n    'bowyer',\n    'bowyers',\n    'bowing',\n    'bowingly',\n    'bowings',\n    'bowk',\n    'bowkail',\n    'bowker',\n    'bowknot',\n    'bowknots',\n    'bowl',\n    'bowla',\n    'bowlder',\n    'bowlderhead',\n    'bowldery',\n    'bowldering',\n    'bowlders',\n    'bowle',\n    'bowled',\n    'bowleg',\n    'bowlegged',\n    'bowleggedness',\n    'bowlegs',\n    'bowler',\n    'bowlers',\n    'bowles',\n    'bowless',\n    'bowlful',\n    'bowlfuls',\n    'bowly',\n    'bowlike',\n    'bowlin',\n    'bowline',\n    'bowlines',\n    'bowling',\n    'bowlings',\n    'bowllike',\n    'bowlmaker',\n    'bowls',\n    'bowmaker',\n    'bowmaking',\n    'bowman',\n    'bowmen',\n    'bown',\n    'bowne',\n    'bowpin',\n    'bowpot',\n    'bowpots',\n    'bowralite',\n    'bows',\n    'bowsaw',\n    'bowse',\n    'bowsed',\n    'bowser',\n    'bowsery',\n    'bowses',\n    'bowshot',\n    'bowshots',\n    'bowsie',\n    'bowsing',\n    'bowsman',\n    'bowsprit',\n    'bowsprits',\n    'bowssen',\n    'bowstaff',\n    'bowstave',\n    'bowstring',\n    'bowstringed',\n    'bowstringing',\n    'bowstrings',\n    'bowstrung',\n    'bowtel',\n    'bowtell',\n    'bowtie',\n    'bowwoman',\n    'bowwood',\n    'bowwort',\n    'bowwow',\n    'bowwows',\n    'box',\n    'boxball',\n    'boxberry',\n    'boxberries',\n    'boxboard',\n    'boxboards',\n    'boxbush',\n    'boxcar',\n    'boxcars',\n    'boxed',\n    'boxen',\n    'boxer',\n    'boxerism',\n    'boxers',\n    'boxes',\n    'boxfish',\n    'boxfishes',\n    'boxful',\n    'boxfuls',\n    'boxhaul',\n    'boxhauled',\n    'boxhauling',\n    'boxhauls',\n    'boxhead',\n    'boxholder',\n    'boxy',\n    'boxiana',\n    'boxier',\n    'boxiest',\n    'boxiness',\n    'boxinesses',\n    'boxing',\n    'boxings',\n    'boxkeeper',\n    'boxlike',\n    'boxmaker',\n    'boxmaking',\n    'boxman',\n    'boxroom',\n    'boxthorn',\n    'boxthorns',\n    'boxty',\n    'boxtop',\n    'boxtops',\n    'boxtree',\n    'boxwallah',\n    'boxwood',\n    'boxwoods',\n    'boxwork',\n    'boza',\n    'bozal',\n    'bozine',\n    'bozo',\n    'bozos',\n    'bozze',\n    'bozzetto',\n    'bp',\n    'bpi',\n    'bps',\n    'bpt',\n    'br',\n    'bra',\n    'braata',\n    'brab',\n    'brabagious',\n    'brabant',\n    'brabanter',\n    'brabantine',\n    'brabble',\n    'brabbled',\n    'brabblement',\n    'brabbler',\n    'brabblers',\n    'brabbles',\n    'brabbling',\n    'brabblingly',\n    'brabejum',\n    'braca',\n    'bracae',\n    'braccae',\n    'braccate',\n    'braccia',\n    'bracciale',\n    'braccianite',\n    'braccio',\n    'brace',\n    'braced',\n    'bracelet',\n    'braceleted',\n    'bracelets',\n    'bracer',\n    'bracery',\n    'bracero',\n    'braceros',\n    'bracers',\n    'braces',\n    'brach',\n    'brache',\n    'brachelytra',\n    'brachelytrous',\n    'bracherer',\n    'brachering',\n    'braches',\n    'brachet',\n    'brachets',\n    'brachia',\n    'brachial',\n    'brachialgia',\n    'brachialis',\n    'brachials',\n    'brachiata',\n    'brachiate',\n    'brachiated',\n    'brachiating',\n    'brachiation',\n    'brachiator',\n    'brachyaxis',\n    'brachycardia',\n    'brachycatalectic',\n    'brachycephal',\n    'brachycephales',\n    'brachycephali',\n    'brachycephaly',\n    'brachycephalic',\n    'brachycephalies',\n    'brachycephalism',\n    'brachycephalization',\n    'brachycephalize',\n    'brachycephalous',\n    'brachycera',\n    'brachyceral',\n    'brachyceric',\n    'brachycerous',\n    'brachychronic',\n    'brachycnemic',\n    'brachycome',\n    'brachycrany',\n    'brachycranial',\n    'brachycranic',\n    'brachydactyl',\n    'brachydactyly',\n    'brachydactylia',\n    'brachydactylic',\n    'brachydactylism',\n    'brachydactylous',\n    'brachydiagonal',\n    'brachydodrome',\n    'brachydodromous',\n    'brachydomal',\n    'brachydomatic',\n    'brachydome',\n    'brachydont',\n    'brachydontism',\n    'brachyfacial',\n    'brachiferous',\n    'brachigerous',\n    'brachyglossal',\n    'brachygnathia',\n    'brachygnathism',\n    'brachygnathous',\n    'brachygrapher',\n    'brachygraphy',\n    'brachygraphic',\n    'brachygraphical',\n    'brachyhieric',\n    'brachylogy',\n    'brachylogies',\n    'brachymetropia',\n    'brachymetropic',\n    'brachinus',\n    'brachiocephalic',\n    'brachiocyllosis',\n    'brachiocrural',\n    'brachiocubital',\n    'brachiofacial',\n    'brachiofaciolingual',\n    'brachioganoid',\n    'brachioganoidei',\n    'brachiolaria',\n    'brachiolarian',\n    'brachiopod',\n    'brachiopoda',\n    'brachiopode',\n    'brachiopodist',\n    'brachiopodous',\n    'brachioradial',\n    'brachioradialis',\n    'brachiorrhachidian',\n    'brachiorrheuma',\n    'brachiosaur',\n    'brachiosaurus',\n    'brachiostrophosis',\n    'brachiotomy',\n    'brachyoura',\n    'brachyphalangia',\n    'brachyphyllum',\n    'brachypinacoid',\n    'brachypinacoidal',\n    'brachypyramid',\n    'brachypleural',\n    'brachypnea',\n    'brachypodine',\n    'brachypodous',\n    'brachyprism',\n    'brachyprosopic',\n    'brachypterous',\n    'brachyrrhinia',\n    'brachysclereid',\n    'brachyskelic',\n    'brachysm',\n    'brachystaphylic',\n    'brachystegia',\n    'brachistocephali',\n    'brachistocephaly',\n    'brachistocephalic',\n    'brachistocephalous',\n    'brachistochrone',\n    'brachystochrone',\n    'brachistochronic',\n    'brachistochronous',\n    'brachystomata',\n    'brachystomatous',\n    'brachystomous',\n    'brachytic',\n    'brachytypous',\n    'brachytmema',\n    'brachium',\n    'brachyura',\n    'brachyural',\n    'brachyuran',\n    'brachyuranic',\n    'brachyure',\n    'brachyurous',\n    'brachyurus',\n    'brachman',\n    'brachtmema',\n    'bracing',\n    'bracingly',\n    'bracingness',\n    'bracings',\n    'braciola',\n    'braciolas',\n    'braciole',\n    'bracioles',\n    'brack',\n    'brackebuschite',\n    'bracked',\n    'bracken',\n    'brackened',\n    'brackens',\n    'bracker',\n    'bracket',\n    'bracketed',\n    'bracketing',\n    'brackets',\n    'bracketted',\n    'bracketwise',\n    'bracky',\n    'bracking',\n    'brackish',\n    'brackishness',\n    'brackmard',\n    'bracon',\n    'braconid',\n    'braconidae',\n    'braconids',\n    'braconniere',\n    'bracozzo',\n    'bract',\n    'bractea',\n    'bracteal',\n    'bracteate',\n    'bracted',\n    'bracteiform',\n    'bracteolate',\n    'bracteole',\n    'bracteose',\n    'bractless',\n    'bractlet',\n    'bractlets',\n    'bracts',\n    'brad',\n    'bradawl',\n    'bradawls',\n    'bradbury',\n    'bradburya',\n    'bradded',\n    'bradding',\n    'bradenhead',\n    'bradford',\n    'bradyacousia',\n    'bradyauxesis',\n    'bradyauxetic',\n    'bradyauxetically',\n    'bradycardia',\n    'bradycardic',\n    'bradycauma',\n    'bradycinesia',\n    'bradycrotic',\n    'bradydactylia',\n    'bradyesthesia',\n    'bradyglossia',\n    'bradykinesia',\n    'bradykinesis',\n    'bradykinetic',\n    'bradykinin',\n    'bradylalia',\n    'bradylexia',\n    'bradylogia',\n    'bradynosus',\n    'bradypepsy',\n    'bradypepsia',\n    'bradypeptic',\n    'bradyphagia',\n    'bradyphasia',\n    'bradyphemia',\n    'bradyphrasia',\n    'bradyphrenia',\n    'bradypnea',\n    'bradypnoea',\n    'bradypod',\n    'bradypode',\n    'bradypodidae',\n    'bradypodoid',\n    'bradypus',\n    'bradyseism',\n    'bradyseismal',\n    'bradyseismic',\n    'bradyseismical',\n    'bradyseismism',\n    'bradyspermatism',\n    'bradysphygmia',\n    'bradystalsis',\n    'bradyteleocinesia',\n    'bradyteleokinesis',\n    'bradytely',\n    'bradytelic',\n    'bradytocia',\n    'bradytrophic',\n    'bradyuria',\n    'bradley',\n    'bradmaker',\n    'bradoon',\n    'bradoons',\n    'brads',\n    'bradshaw',\n    'bradsot',\n    'brae',\n    'braeface',\n    'braehead',\n    'braeman',\n    'braes',\n    'braeside',\n    'brag',\n    'bragas',\n    'brager',\n    'braggadocian',\n    'braggadocianism',\n    'braggadocio',\n    'braggadocios',\n    'braggardism',\n    'braggart',\n    'braggartism',\n    'braggartly',\n    'braggartry',\n    'braggarts',\n    'braggat',\n    'bragged',\n    'bragger',\n    'braggery',\n    'braggers',\n    'braggest',\n    'bragget',\n    'braggy',\n    'braggier',\n    'braggiest',\n    'bragging',\n    'braggingly',\n    'braggish',\n    'braggishly',\n    'braggite',\n    'braggle',\n    'bragi',\n    'bragite',\n    'bragless',\n    'bragly',\n    'bragozzo',\n    'brags',\n    'braguette',\n    'bragwort',\n    'brahm',\n    'brahma',\n    'brahmachari',\n    'brahmahood',\n    'brahmaic',\n    'brahman',\n    'brahmana',\n    'brahmanaspati',\n    'brahmanda',\n    'brahmaness',\n    'brahmanhood',\n    'brahmani',\n    'brahmany',\n    'brahmanic',\n    'brahmanical',\n    'brahmanism',\n    'brahmanist',\n    'brahmanistic',\n    'brahmanists',\n    'brahmanize',\n    'brahmans',\n    'brahmapootra',\n    'brahmas',\n    'brahmi',\n    'brahmic',\n    'brahmin',\n    'brahminee',\n    'brahminic',\n    'brahminism',\n    'brahminist',\n    'brahminists',\n    'brahmins',\n    'brahmism',\n    'brahmoism',\n    'brahms',\n    'brahmsian',\n    'brahmsite',\n    'brahui',\n    'bray',\n    'braid',\n    'braided',\n    'braider',\n    'braiders',\n    'braiding',\n    'braidings',\n    'braidism',\n    'braidist',\n    'braids',\n    'braye',\n    'brayed',\n    'brayer',\n    'brayera',\n    'brayerin',\n    'brayers',\n    'braies',\n    'brayette',\n    'braying',\n    'brail',\n    'brailed',\n    'brailing',\n    'braille',\n    'brailled',\n    'brailler',\n    'brailles',\n    'braillewriter',\n    'brailling',\n    'braillist',\n    'brails',\n    'brain',\n    'brainache',\n    'braincap',\n    'braincase',\n    'brainchild',\n    'brainchildren',\n    'braincraft',\n    'brained',\n    'brainer',\n    'brainfag',\n    'brainge',\n    'brainy',\n    'brainier',\n    'brainiest',\n    'brainily',\n    'braininess',\n    'braining',\n    'brainish',\n    'brainless',\n    'brainlessly',\n    'brainlessness',\n    'brainlike',\n    'brainpan',\n    'brainpans',\n    'brainpower',\n    'brains',\n    'brainsick',\n    'brainsickly',\n    'brainsickness',\n    'brainstem',\n    'brainstems',\n    'brainstone',\n    'brainstorm',\n    'brainstormer',\n    'brainstorming',\n    'brainstorms',\n    'brainteaser',\n    'brainteasers',\n    'brainward',\n    'brainwash',\n    'brainwashed',\n    'brainwasher',\n    'brainwashers',\n    'brainwashes',\n    'brainwashing',\n    'brainwashjng',\n    'brainwater',\n    'brainwave',\n    'brainwood',\n    'brainwork',\n    'brainworker',\n    'braird',\n    'brairded',\n    'brairding',\n    'braireau',\n    'brairo',\n    'brays',\n    'braise',\n    'braised',\n    'braises',\n    'braising',\n    'braystone',\n    'braize',\n    'braizes',\n    'brake',\n    'brakeage',\n    'brakeages',\n    'braked',\n    'brakehand',\n    'brakehead',\n    'brakeless',\n    'brakeload',\n    'brakemaker',\n    'brakemaking',\n    'brakeman',\n    'brakemen',\n    'braker',\n    'brakeroot',\n    'brakes',\n    'brakesman',\n    'brakesmen',\n    'braky',\n    'brakie',\n    'brakier',\n    'brakiest',\n    'braking',\n    'braless',\n    'bram',\n    'bramah',\n    'bramantesque',\n    'bramantip',\n    'bramble',\n    'brambleberry',\n    'brambleberries',\n    'bramblebush',\n    'brambled',\n    'brambles',\n    'brambly',\n    'bramblier',\n    'brambliest',\n    'brambling',\n    'brambrack',\n    'brame',\n    'bramia',\n    'bran',\n    'brancard',\n    'brancardier',\n    'branch',\n    'branchage',\n    'branched',\n    'branchedness',\n    'branchellion',\n    'brancher',\n    'branchery',\n    'branches',\n    'branchful',\n    'branchi',\n    'branchy',\n    'branchia',\n    'branchiae',\n    'branchial',\n    'branchiata',\n    'branchiate',\n    'branchicolous',\n    'branchier',\n    'branchiest',\n    'branchiferous',\n    'branchiform',\n    'branchihyal',\n    'branchiness',\n    'branching',\n    'branchings',\n    'branchiobdella',\n    'branchiocardiac',\n    'branchiogenous',\n    'branchiomere',\n    'branchiomeric',\n    'branchiomerism',\n    'branchiopallial',\n    'branchiopneustic',\n    'branchiopod',\n    'branchiopoda',\n    'branchiopodan',\n    'branchiopodous',\n    'branchiopoo',\n    'branchiopulmonata',\n    'branchiopulmonate',\n    'branchiosaur',\n    'branchiosauria',\n    'branchiosaurian',\n    'branchiosaurus',\n    'branchiostegal',\n    'branchiostegan',\n    'branchiostege',\n    'branchiostegidae',\n    'branchiostegite',\n    'branchiostegous',\n    'branchiostoma',\n    'branchiostomid',\n    'branchiostomidae',\n    'branchiostomous',\n    'branchipodidae',\n    'branchipus',\n    'branchireme',\n    'branchiura',\n    'branchiurous',\n    'branchless',\n    'branchlet',\n    'branchlike',\n    'branchling',\n    'branchman',\n    'branchstand',\n    'branchway',\n    'brand',\n    'brandade',\n    'branded',\n    'brandenburg',\n    'brandenburger',\n    'brandenburgh',\n    'brandenburgs',\n    'brander',\n    'brandering',\n    'branders',\n    'brandi',\n    'brandy',\n    'brandyball',\n    'brandied',\n    'brandies',\n    'brandify',\n    'brandying',\n    'brandyman',\n    'branding',\n    'brandiron',\n    'brandise',\n    'brandish',\n    'brandished',\n    'brandisher',\n    'brandishers',\n    'brandishes',\n    'brandishing',\n    'brandisite',\n    'brandywine',\n    'brandle',\n    'brandless',\n    'brandling',\n    'brandon',\n    'brandreth',\n    'brandrith',\n    'brands',\n    'brandsolder',\n    'brangle',\n    'brangled',\n    'branglement',\n    'brangler',\n    'brangling',\n    'branial',\n    'brank',\n    'branky',\n    'brankie',\n    'brankier',\n    'brankiest',\n    'branks',\n    'brankursine',\n    'branle',\n    'branles',\n    'branned',\n    'branner',\n    'brannerite',\n    'branners',\n    'branny',\n    'brannier',\n    'branniest',\n    'brannigan',\n    'branniness',\n    'branning',\n    'brans',\n    'bransle',\n    'bransles',\n    'bransolder',\n    'brant',\n    'branta',\n    'brantail',\n    'brantails',\n    'brantcorn',\n    'brantle',\n    'brantness',\n    'brants',\n    'branular',\n    'braquemard',\n    'brarow',\n    'bras',\n    'brasen',\n    'brasenia',\n    'brasero',\n    'braseros',\n    'brash',\n    'brasher',\n    'brashes',\n    'brashest',\n    'brashy',\n    'brashier',\n    'brashiest',\n    'brashiness',\n    'brashly',\n    'brashness',\n    'brasier',\n    'brasiers',\n    'brasil',\n    'brasilein',\n    'brasilete',\n    'brasiletto',\n    'brasilia',\n    'brasilin',\n    'brasilins',\n    'brasils',\n    'brasque',\n    'brasqued',\n    'brasquing',\n    'brass',\n    'brassage',\n    'brassages',\n    'brassard',\n    'brassards',\n    'brassart',\n    'brassarts',\n    'brassate',\n    'brassavola',\n    'brassbound',\n    'brassbounder',\n    'brasse',\n    'brassed',\n    'brassey',\n    'brasseys',\n    'brasser',\n    'brasserie',\n    'brasseries',\n    'brasses',\n    'brasset',\n    'brassy',\n    'brassia',\n    'brassic',\n    'brassica',\n    'brassicaceae',\n    'brassicaceous',\n    'brassicas',\n    'brassidic',\n    'brassie',\n    'brassier',\n    'brassiere',\n    'brassieres',\n    'brassies',\n    'brassiest',\n    'brassily',\n    'brassylic',\n    'brassiness',\n    'brassish',\n    'brasslike',\n    'brassware',\n    'brasswork',\n    'brassworker',\n    'brassworks',\n    'brast',\n    'brat',\n    'bratchet',\n    'bratina',\n    'bratling',\n    'brats',\n    'bratstva',\n    'bratstvo',\n    'brattach',\n    'bratty',\n    'brattice',\n    'bratticed',\n    'bratticer',\n    'brattices',\n    'bratticing',\n    'brattie',\n    'brattier',\n    'brattiest',\n    'brattiness',\n    'brattish',\n    'brattishing',\n    'brattle',\n    'brattled',\n    'brattles',\n    'brattling',\n    'bratwurst',\n    'braula',\n    'brauna',\n    'brauneberger',\n    'brauneria',\n    'braunite',\n    'braunites',\n    'braunschweiger',\n    'brauronia',\n    'brauronian',\n    'brava',\n    'bravade',\n    'bravado',\n    'bravadoed',\n    'bravadoes',\n    'bravadoing',\n    'bravadoism',\n    'bravados',\n    'bravas',\n    'brave',\n    'braved',\n    'bravehearted',\n    'bravely',\n    'braveness',\n    'braver',\n    'bravery',\n    'comedians',\n    'elderling',\n    'elderman',\n    'eldermen',\n    'eldern',\n    'elders',\n    'elsewhere',\n    'hemisphere',\n    'hydria',\n    'ursa',\n    'vermin',\n    'wolfman',\n    'words',\n    'zoo',\n];\n\nexport {\n    en_dictionary_test\n};","// Trie.js is copied from https://gist.github.com/tpae/72e1c54471e88b689f85ad2b3940a8f0\n\n// Trie.js - super simple JS implementation\n// https://en.wikipedia.org/wiki/Trie\n\n// -----------------------------------------\n\n// we start with the TrieNode\nfunction TrieNode(key) {\n    // the \"key\" value will be the character in sequence\n    this.key = key;\n\n    // we keep a reference to parent\n    this.parent = null;\n\n    // we have hash of children\n    this.children = {};\n\n    // check to see if the node is at the end\n    this.end = false;\n}\n\n// iterates through the parents to get the word.\n// time complexity: O(k), k = word length\nTrieNode.prototype.getWord = function() {\n    var output = [];\n    var node = this;\n\n    while (node !== null) {\n        output.unshift(node.key);\n        node = node.parent;\n    }\n\n    return output.join('');\n};\n\n// -----------------------------------------\n\n// we implement Trie with just a simple root with null value.\nfunction Trie() {\n    this.root = new TrieNode(null);\n}\n\n// inserts a word into the trie.\n// time complexity: O(k), k = word length\nTrie.prototype.insert = function(word) {\n    var node = this.root; // we start at the root 😬\n\n    // for every character in the word\n    for(var i = 0; i < word.length; i++) {\n        // check to see if character node exists in children.\n        if (!node.children[word[i]]) {\n            // if it doesn't exist, we then create it.\n            node.children[word[i]] = new TrieNode(word[i]);\n\n            // we also assign the parent to the child node.\n            node.children[word[i]].parent = node;\n        }\n\n        // proceed to the next depth in the trie.\n        node = node.children[word[i]];\n\n        // finally, we check to see if it's the last word.\n        if (i === word.length-1) {\n            // if it is, we set the end flag to true.\n            node.end = true;\n        }\n    }\n};\n\n// check if it contains a whole word.\n// time complexity: O(k), k = word length\nTrie.prototype.contains = function(word) {\n    var node = this.root;\n\n    // for every character in the word\n    for(var i = 0; i < word.length; i++) {\n        // check to see if character node exists in children.\n        if (node.children[word[i]]) {\n            // if it exists, proceed to the next depth of the trie.\n            node = node.children[word[i]];\n        } else {\n            // doesn't exist, return false since it's not a valid word.\n            return false;\n        }\n    }\n\n    // we finished going through all the words, but is it a whole word?\n    return node.end;\n};\n\n// returns every word with given prefix\n// time complexity: O(p + n), p = prefix length, n = number of child paths\nTrie.prototype.find = function(prefix) {\n    var node = this.root;\n    var output = [];\n\n    // for every character in the prefix\n    for(var i = 0; i < prefix.length; i++) {\n        // make sure prefix actually has words\n        if (node.children[prefix[i]]) {\n            node = node.children[prefix[i]];\n        } else {\n            // there's none. just return it.\n            return output;\n        }\n    }\n\n    // recursively find all words in the node\n    findAllWords(node, output);\n\n    return output;\n};\n\n// recursive function to find all words in the given node.\nfunction findAllWords(node, arr) {\n    // base case, if node is at a word, push to output\n    if (node.end) {\n        arr.unshift(node.getWord());\n    }\n\n    // iterate through each children, call recursive findAllWords\n    for (var child in node.children) {\n        findAllWords(node.children[child], arr);\n    }\n}\n\nexport default Trie;","// Represents directions to get to each neighbor from a position\nconst neighboringPositionDeltas = [\n    '(-1,-1)', '(0,-1)', '(1,-1)',\n    '(-1,0)',            '(1,0)',\n    '(-1,1)',  '(0,1)',  '(1,1)'\n];\n\n/**\n * Parses X and Y coordinates from a string of format (X,Y).\n *\n * @param {String} position - Coordinates in the format of (X,Y)\n * @returns {[number, number]} array of coordinates in the format of [X,Y]\n */\nconst parseCoordinates = (position) => {\n    // Parse out X and Y values from position\n    const indexOfComma = position.indexOf(',');\n    // Start at 1 to get rid of the (\n    const x = parseInt(position.substring(1, indexOfComma));\n    // Subtract 1 to get rid of the )\n    const y = parseInt(position.substring(indexOfComma + 1, position.length - 1));\n\n    return [x,y];\n};\n\n/**\n * Given the current position, already visited positions, and board size this method returns an\n * array containing all the valid neighboring positions you can get to from the current position.\n *\n * @param {String} currentPosition  - Current position in the board as '(x,y)'\n * @param {Set}    visitedPositions - Already visited positions on the board\n * @param {number} numberOfColumns  - Number of columns on the board\n * @param {number} numberOfRows     - Number of rows on the board\n * @returns {[]} array of coordinates that you can still go to from the current position\n */\nconst getValidNeighboringPositions = (currentPosition, visitedPositions, numberOfColumns, numberOfRows) => {\n    const neighboringPositions = [];\n\n    const [ currentX, currentY ] = parseCoordinates(currentPosition);\n\n    neighboringPositionDeltas.forEach((neighboringPositionDelta) => {\n        const [ neighboringPositionDeltaX, neighboringPositionDeltaY ] = parseCoordinates(neighboringPositionDelta);\n\n        // Calculate new position\n        const newPositionX = currentX + neighboringPositionDeltaX;\n        const newPositionY = currentY + neighboringPositionDeltaY;\n\n        // If the new position is within the board boundaries and we haven't visited it yet, add it to the array of neighbors\n        if (newPositionX >= 0 && newPositionX < numberOfColumns\n            && newPositionY >= 0 && newPositionY < numberOfRows)\n        {\n            const newPosition = `(${newPositionX},${newPositionY})`;\n\n            if (!visitedPositions.has(newPosition)) {\n                neighboringPositions.push(newPosition);\n            }\n        }\n    });\n\n    return neighboringPositions;\n};\n\n/**\n * Recursively searches for words by traversing down the board state.\n *\n * @param {Object} boardState      - Object representing the board where keys are coordinates and values are letters\n * @param {Set} wordsFound         - Words that have been found already\n * @param {String} currentWord     - Current 'word' that has been spelled by the visited positions\n * @param {Trie} dictionaryTrie    - Dictionary Trie to check for valid words\n * @param {Set} visitedPositions   - Already visited positions on the board\n * @param {String} currentPosition - Current position in the board as '(x,y)'\n * @param {number} numberOfColumns - Number of columns on the board\n * @param {number} numberOfRows    - Number of rows on the board\n */\nconst searchForWord = (\n    boardState,\n    wordsFound,\n    currentWord,\n    dictionaryTrie,\n    visitedPositions,\n    currentPosition,\n    numberOfColumns,\n    numberOfRows\n) => {\n    // Valid word has to be at least 3 letters so don't bother seeing if it's a valid word if it's too short\n    if (currentWord.length >= 3 && dictionaryTrie.contains(currentWord)) {\n        wordsFound.add(currentWord);\n    }\n\n    const wordsWithPrefx = dictionaryTrie.find(currentWord);\n    // If there are words with the prefix of the current word, keep searching for more words. Otherwise, stop.\n    if (wordsWithPrefx.length > 0) {\n        const neighboringPositions = getValidNeighboringPositions(currentPosition, visitedPositions, numberOfColumns, numberOfRows);\n        neighboringPositions.forEach((neighboringPosition) => {\n            const newCurrentPosition = neighboringPosition;\n\n            // Create a new Set so we don't alter the current reference of visistedPositions\n            const newVisitedPositions = new Set(visitedPositions);\n            newVisitedPositions.add(newCurrentPosition);\n\n            const newCurrentWord = currentWord + boardState[newCurrentPosition];\n\n            searchForWord(boardState, wordsFound, newCurrentWord, dictionaryTrie, newVisitedPositions, newCurrentPosition, numberOfColumns, numberOfRows);\n        });\n    }\n};\n\n/**\n * Solves the given Boggle represented by the board state and returns an array of any words found.\n *\n * @param {Object} boardState      - Object representing the board where keys are coordinates and values are letters\n * @param {number} numberOfColumns - Number of columns on the board\n * @param {number} numberOfRows    - Number of rows on the board\n * @param {Trie} dictionaryTrie    - Dictionary Trie to check for valid words\n * @returns {[]} array of any words that were found\n */\nconst solveTheBoggle = (boardState, numberOfColumns, numberOfRows, dictionaryTrie) => {\n    const wordsFound = new Set();\n\n    /*\n     * Get the entries of board state which will give an array of [key,value] where key is the current board position\n     * and value is the letter at that position. Letter will be the 'current word' at the point since it's our starting\n     * position. We are going to go through every position on the board and do a depth-first-search looking for words.\n     */\n    for (const [currentPosition, letter] of Object.entries(boardState)) {\n        const visistedPositions = new Set();\n        visistedPositions.add(currentPosition);\n\n        searchForWord(boardState, wordsFound, letter, dictionaryTrie, visistedPositions, currentPosition, numberOfColumns, numberOfRows);\n    }\n\n    return Array.from(wordsFound);\n};\n\nexport {\n    solveTheBoggle\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TextField from '@material-ui/core/TextField';\n\nconst cellStyle = {\n    background: 'white',\n    borderRadius: '10px',\n    border: '1px solid black',\n    height: '80px',\n    marginBottom: '10px',\n    marginLeft: '5px',\n    marginTop: '10px',\n    marginRight: '5px',\n    width: '70px'\n};\n\nconst formHelperTextProps = {\n    style: {\n        textAlign: 'center'\n    }\n}\n\nconst BoggleBoardCell = (props) => {\n    const {\n        alphabet,\n        boardState,\n        cellName,\n        setBoardState\n    } = props;\n\n    const [cellValue, setCellValue] = React.useState('');\n    const [hasError, setHasError] = React.useState(false);\n\n    const handleOnChange = (event) => {\n        // Only let the user input a single character and make it uppercase\n        const newValue = event.target.value.charAt(0).toUpperCase();\n\n        setCellValue(newValue);\n\n        // Update board state\n        boardState[cellName] = newValue;\n        setBoardState(boardState);\n\n        // If the character isn't in our alphabet make the input error\n        setHasError(newValue.length > 0 && !alphabet.has(newValue));\n    };\n\n    // Needs to be in here instead of outside the class like the others since it's using state.\n    const inputProps = {\n        style: {\n            color: hasError ? 'red' : '#000000',\n            fontSize: '20px',\n            textAlign: 'center',\n        }\n    };\n\n    return (\n        <div style={cellStyle}>\n            <TextField\n                error={hasError}\n                FormHelperTextProps={formHelperTextProps}\n                helperText={hasError ? \"Invalid character\" : undefined}\n                inputProps={inputProps}\n                value={cellValue}\n                onChange={handleOnChange}\n            />\n        </div>\n    );\n};\n\nBoggleBoardCell.propTypes = {\n    alphabet: PropTypes.instanceOf(Set).isRequired,\n    boardState: PropTypes.object.isRequired,\n    cellName: PropTypes.string.isRequired,\n    setBoardState: PropTypes.func.isRequired\n};\n\nexport default BoggleBoardCell;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport BoggleBoardCell from './BoggleBoardCell';\n\nconst BoggleBoardColumn = (props) => {\n    const {\n        alphabet,\n        boardState,\n        columnIndex,\n        numberOfRows,\n        setBoardState\n    } = props;\n\n    const rowCells = [];\n\n    for (let i = 0; i < numberOfRows; i++) {\n        rowCells.push(\n            <BoggleBoardCell\n                alphabet={alphabet}\n                boardState={boardState}\n                cellName={`(${i},${columnIndex})`}\n                key={`cell-(${i},${columnIndex})`}\n                setBoardState={setBoardState}\n            />\n        );\n    }\n\n    return (\n        <div>\n            {rowCells}\n        </div>\n    );\n}\n\nBoggleBoardColumn.propTypes = {\n    alphabet: PropTypes.instanceOf(Set).isRequired,\n    boardState: PropTypes.object.isRequired,\n    columnIndex: PropTypes.number.isRequired,\n    numberOfRows: PropTypes.number.isRequired,\n    setBoardState: PropTypes.func.isRequired\n};\n\nexport default BoggleBoardColumn;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\n\nimport BoggleBoardColumn from './BoggleBoardColumn';\n\nconst BOGGLE_BLUE = '#0187BB';\n\nconst boardStyle = {\n    background: BOGGLE_BLUE,\n    border: '1px solid black',\n    borderRadius: '10px',\n    display: 'inline-flex',\n    paddingLeft: '5px',\n    paddingRight: '5px'\n};\n\nconst containerStyle = {\n    alignItems: 'center',\n    display: 'flex',\n    flexDirection: 'column'\n}\n\nconst buttonStyle = {\n    marginTop: '20px'\n};\n\nconst BoggleBoard = (props) => {\n    const {\n        alphabet,\n        boardState,\n        handleSolve,\n        numberOfColumns,\n        numberOfRows,\n        setBoardState\n    } = props;\n\n    const columns = [];\n\n    for (let i = 0; i < numberOfColumns; i++) {\n        columns.push(\n            <BoggleBoardColumn\n                alphabet={alphabet}\n                boardState={boardState}\n                columnIndex={i}\n                key={`column-${i}`}\n                numberOfRows={numberOfRows}\n                setBoardState={setBoardState}\n            />\n        )\n    }\n\n    return (\n        <div style={containerStyle}>\n            <div style={boardStyle}>\n                {columns}\n            </div>\n            <div>\n            <Button\n                color=\"primary\"\n                style={buttonStyle}\n                variant=\"contained\"\n                onClick={handleSolve}\n            >\n                Solve\n            </Button>\n            </div>\n        </div>\n    );\n};\n\nBoggleBoard.propTypes = {\n    alphabet: PropTypes.instanceOf(Set).isRequired,\n    boardState: PropTypes.object.isRequired,\n    handleSolve: PropTypes.func.isRequired,\n    numberOfColumns: PropTypes.number.isRequired,\n    numberOfRows: PropTypes.number.isRequired,\n    setBoardState: PropTypes.func.isRequired\n};\n\nexport default BoggleBoard;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst wordListStyle = {\n    display: 'flex',\n    flexDirection: 'column'\n}\n\nconst WordsFound = (props) => {\n    const { wordsFound } = props;\n\n    return (\n        <>\n            <h4>\n                Words Found\n            </h4>\n            <div style={wordListStyle}>\n                {wordsFound.map((word) =>\n                    <span>{word}</span>\n                )}\n            </div>\n        </>\n    );\n};\n\nWordsFound.propTypes = {\n    wordsFound: PropTypes.array.isRequired\n};\n\nexport default WordsFound;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { solveTheBoggle } from '../util/BoggleSolverUtil';\nimport Trie from '../util/Trie';\n\nimport BoggleBoard from './boggleBoard/BoggleBoard';\nimport WordsFound from './WordsFound';\n\nconst headerStyle = {\n    textAlign: 'center'\n};\n\nconst boardContainerStyle = {\n    display: 'flex',\n    flexDirection: 'row-reverse',\n    left: 0,\n    position: 'absolute',\n    width: '49%'\n}\n\nconst wordsFoundContainerStyle = {\n    position: 'absolute',\n    right: 0,\n    width: '49%'\n}\n\nconst BoggleSolver = (props) => {\n    const {\n        alphabet,\n        dictionaryTrie,\n        numberOfColumns,\n        numberOfRows\n    } = props;\n\n    const [boardState, setBoardState] = React.useState({});\n    const [wordsFound, setWordsFound] = React.useState([]);\n\n    React.useEffect(() => {\n        const initialBoardState = {};\n\n        for (let i = 0; i < numberOfRows; i++) {\n            for (let j = 0; j < numberOfColumns; j++) {\n                initialBoardState[`(${i},${j})`] = '';\n            }\n        }\n\n        setBoardState(initialBoardState);\n    }, [numberOfColumns, numberOfRows]);\n\n    const handleSolve = () =>\n        setWordsFound(solveTheBoggle(boardState, numberOfColumns, numberOfRows, dictionaryTrie));\n\n    return (\n        <div>\n            <h1 style={headerStyle}>\n                Boggle Solver\n            </h1>\n            <div>\n                <div style={boardContainerStyle}>\n                    <BoggleBoard\n                        alphabet={alphabet}\n                        boardState={boardState}\n                        numberOfColumns={numberOfColumns}\n                        numberOfRows={numberOfRows}\n                        setBoardState={setBoardState}\n                        handleSolve={handleSolve}\n                    />\n                </div>\n                <div style={wordsFoundContainerStyle}>\n                    <WordsFound wordsFound={wordsFound} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nBoggleSolver.propTypes = {\n    alphabet: PropTypes.instanceOf(Set).isRequired,\n    dictionaryTrie: PropTypes.instanceOf(Trie).isRequired,\n    numberOfColumns: PropTypes.number.isRequired,\n    numberOfRows: PropTypes.number.isRequired,\n};\n\nexport default BoggleSolver;\n","import React from 'react';\n\nimport { en_dictionary_test } from './util/Dictionary';\nimport { createDictionaryTrie } from './util/DictionaryReader';\nimport Trie from './util/Trie';\n\nimport BoggleSolver from './views/BoggleSolver';\n\n/*\n * Things to still implement:\n * -Ability for user to select number of columns and rows\n * -Ability for user to select alphabet to use\n * -Ability for user to select dictionary to use\n * -Figure out how to read in entire English dictionary instead of a small subset without taking forever\n * -Make validation actually work\n * -Unit tests\n */\n\nconst App = () => {\n    // Goal was to let the user select the number of columns and rows, but didn't have time to implement\n    const [numberOfColumns, setNumberOfColumns] = React.useState(4);\n    const [numberOfRows, setNumberOfRows] = React.useState(4);\n    // Goal was to let the user select the alphabet they want to use, but didn't have time to implement\n    const [alphabet, setAlphabet] = React.useState(new Set('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n    // Goal was to let the user select the dictionary they want to use, but didn't have time to implement\n    const [dictionary, setDictionary] = React.useState(en_dictionary_test);\n    const [dictionaryTrie, setDictionaryTrie] = React.useState(new Trie());\n\n    React.useEffect(() => {\n        const newDictionaryTrie = createDictionaryTrie(dictionary, 3, numberOfColumns * numberOfRows);\n        setDictionaryTrie(newDictionaryTrie);\n    }, [dictionary, numberOfColumns, numberOfRows]);\n\n    return (\n        <BoggleSolver\n            alphabet={alphabet}\n            dictionaryTrie={dictionaryTrie}\n            numberOfColumns={numberOfColumns}\n            numberOfRows={numberOfRows}\n        />\n    );\n}\n\nexport default App;","import Trie from './Trie';\n\n/**\n * Filters a dictionary to only have words that are within the given word length limits.\n * It also upper cases every word.\n *\n * @param {Array}  dictionary        - Dictionary to filter\n * @param {number} minimumWordLength - Minimum length of words to keep\n * @param {number} maxWordLength     - Maximum length of words to keep\n * @returns {[]} the filtered dictionary\n */\nconst filterDictionary = (dictionary, minimumWordLength, maxWordLength) =>\n    dictionary.reduce((filteredDictionary, word) => {\n        if (word.length >= minimumWordLength && word.length <= maxWordLength) {\n            filteredDictionary.push(word.toUpperCase());\n        }\n        return filteredDictionary;\n    }, []);\n\n/**\n * Filters the given dictionary to get rid of any words that aren't within the given word\n * length limits, upper cases the remaining words, and then creates a Trie from the\n * filtered dictionary.\n *\n * @param {Array}  dictionary        - Dictionary to filter\n * @param {number} minimumWordLength - Minimum length of words to keep\n * @param {number} maxWordLength     - Maximum length of words to keep\n * @returns {Trie}\n */\nconst createDictionaryTrie = (dictionary, minimumWordLength, maxWordLength) => {\n    // First filter the dictionary to get rid of unneeded words\n    const filteredDictionary = filterDictionary(dictionary, minimumWordLength, maxWordLength);\n\n    // Construct the Trie from the filtered dictionary\n    const dictionaryTrie = new Trie();\n    filteredDictionary.forEach((word) => dictionaryTrie.insert(word));\n\n    return dictionaryTrie;\n};\n\nexport {\n    createDictionaryTrie\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}